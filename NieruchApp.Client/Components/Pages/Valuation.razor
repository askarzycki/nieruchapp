@page "/valuation"
@using MudBlazor
@using NieruchApp.Client.Models
@using NieruchApp.Client.Services
@inject ValuationService ValuationService

<PageTitle>Nowa wycena</PageTitle>

<MudContainer Class="mx-2">
    <MudText Typo="Typo.h3" Class="my-2">Nowa wycena</MudText>
    <MudDivider DividerType="DividerType.FullWidth" />
</MudContainer>

<MudGrid>
    <MudItem xs="12">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
            <MudCard Class="mx-10">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h5">Lokalizacja</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudText>Wybierz dzielnicę Warszawy z listy poniżej.</MudText>
                    <MudDivider DividerType="DividerType.Middle" Class="my-6" />
                    <MudSelect T="DistrictDto" @bind-Value="selectedDistrict" ToStringFunc="@((x) => x?.DistrictName)" AnchorOrigin="Origin.BottomCenter" Clearable>
                        @foreach (var district in districts)
                        {
                            <MudSelectItem T="DistrictDto" Value="@district" />
                        }
                    </MudSelect>

                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Text" Color="Color.Primary">Zatwierdź</MudButton>
                    <MudButton Variant="Variant.Text" Color="Color.Primary">Pomiń</MudButton>
                </MudCardActions>
            </MudCard>
        </MudPaper>
    </MudItem>
    <MudItem xs="12">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
        @*     <MudCarousel Class="mud-width-full" @ref="stepsCarousel" ItemsSource="@valuationSteps" @bind-SelectedIndex="selectedIndex" Style="height:400px;" ShowArrows="true" ShowBullets="true" EnableSwipeGesture="true" AutoCycle="false">
                <ItemTemplate>
                    <div class="d-flex flex-column flex-column justify-center" style="height:100%">
                        <ValuationStep Step="@context" OnApproval="UpdateValuationSummary" />
                    </div>
                </ItemTemplate>
            </MudCarousel> *@

            @if (isValuationInProgress)
            {
                <ValuationStep Step="valuationSteps[currentStepIndex]" OnApproval="UpdateValuationSummary" />
            }
            else
            {
                <MudText Typo="Typo.h4" Class="my-2">Kalkulacja została skończona!</MudText>
                <p>Podusmowanie:</p>
                <p>@string.Join('|', selectedOptions.Select(x => x.Label))</p>
                <MudText Typo="Typo.h4" Class="my-2">Cena twojego mieszkania wynosi <b>123400</b> zł /m2)</MudText>
            }
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    //MudCarousel<ValuationStepDto> stepsCarousel;
    //int selectedIndex;

    ValuationStepDto[] valuationSteps;
    ValuationStepDto currentStep = null;
    int currentStepIndex = 0;
    bool isValuationInProgress = false;

    List<DistrictDto> districts;

    DistrictDto? selectedDistrict;

    List<ValuationStepOptionDto> selectedOptions = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        districts = [new() { DistrictId = 1, DistrictName = "Bemowo" }, new() { DistrictId = 2, DistrictName = "Bielany" }];
        valuationSteps = await ValuationService.GetValuationSteps();
        currentStep = valuationSteps[currentStepIndex];
        isValuationInProgress = true;
    }

    async Task UpdateValuationSummary(ValuationStepOptionDto option)
    {
        selectedOptions.Add(option);

        if(currentStepIndex < valuationSteps.Length - 1)
        {
            currentStepIndex++;
        }
        else
        {
            isValuationInProgress = false;
        }        

        // if (valuationSteps.Any())
        // {
        //     stepsCarousel.MoveTo(System.Math.Max(System.Math.Min(selectedIndex, valuationSteps.Count - 1), 0));
        //     valuationSteps.RemoveAt(selectedIndex);
        //     await Task.Delay(1);                        
        // }

    }
}

