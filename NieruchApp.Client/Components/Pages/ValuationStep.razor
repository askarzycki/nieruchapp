@using MudBlazor
@using NieruchApp.Client.Models


<MudCard Class="mx-10">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h5">@Step.Header</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudText>@Step.Prompt</MudText>
        <MudDivider DividerType="DividerType.Middle" Class="my-6" />
            <MudRadioGroup T="ValuationStepOptionDto" @bind-value="selectedOption" Disabled="@isClosed">

            @foreach (var option in Step.Options)
                  {
                      <MudRadio Value="@option" Color="Color.Primary" UnCheckedColor="Color.Default">@option.Label</MudRadio>
                  }

            </MudRadioGroup>
    </MudCardContent>
    <MudCardActions>
        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="(() => Approve())" Disabled="@isClosed">Zatwierdź</MudButton>
        <MudButton Variant="Variant.Text" Color="Color.Primary" Disabled="@isClosed">Pomiń</MudButton>
    </MudCardActions>
    <MudOverlay @bind-Visible="@isClosed" DarkBackground="true" AutoClose="true">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" hidden="@(!isClosed)" />
    </MudOverlay>

    
</MudCard>

@code {
    [Parameter]
    public ValuationStepDto Step { get; set; }

    [Parameter]
    public EventCallback<ValuationStepOptionDto> OnApproval { get; set; }

    ValuationStepOptionDto? selectedOption = null;

    private bool isClosed = false;

    async Task Approve()
    {
        isClosed = true;
        await Task.Delay(500);

        await OnApproval.InvokeAsync(selectedOption);
    }

    async Task Skip()
    {
        selectedOption = null;
        isClosed = true;
    }

    protected override Task OnParametersSetAsync()
    {
        isClosed = false;
        selectedOption = null;
        return base.OnParametersSetAsync();
    }
}